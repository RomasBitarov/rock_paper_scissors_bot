from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup, \
    ReplyKeyboardRemove, KeyboardButtonPollType
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types.web_app_info import WebAppInfo



BOT_TOKEN = '7129172882:AAGKbOhFPaKUl3lpaALEv9I7Q3bLeuIH-Cw'
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
kb_builder = ReplyKeyboardBuilder()


# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
contact_btn = KeyboardButton(
    text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω',
    request_contact=True
)
geo_btn = KeyboardButton(
    text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
    request_location=True
)
pool_btn = KeyboardButton(
    text='–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å',
    request_poll=KeyboardButtonPollType(type='regular')
)
pool_btn2 = KeyboardButton(
    text='–°–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É',
    request_poll=KeyboardButtonPollType(type='quiz')
)

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
web_app_btn = KeyboardButton(
    text='Start Web App',
    web_app=WebAppInfo(url="https://stepik.org/")
)
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
web_app_keyboard = ReplyKeyboardMarkup(
    keyboard=[[web_app_btn]],
    resize_keyboard=True
)


# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –±–∏–ª–¥–µ—Ä
kb_builder.add(contact_btn, geo_btn, pool_btn, pool_btn2)
kb_builder.adjust(1, 1, 2)


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard: ReplyKeyboardMarkup = kb_builder.as_markup(
    resize_keyboard=True,
    one_time_keyboard=True
)

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        text='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏',
        reply_markup=keyboard
    )

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/web_app"
@dp.message(Command(commands='web_app'))
async def process_web_app_command(message: Message):
    await message.answer(
        text='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏',
        reply_markup=web_app_keyboard
    )

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
# kb_builder = ReplyKeyboardBuilder()
# # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
# buttons: list[KeyboardButton] = [
#     KeyboardButton(text=f'button {i + 1}') for i in range(10)
# ]
# # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –±–∏–ª–¥–µ—Ä, —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ
# # –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –∫–Ω–æ–ø–∫–∏
# kb_builder.row(*buttons, width=4)
#
# @dp.message(CommandStart())
# async def process_start_command(message: Message):
#     await message.answer(
#         text='–í–æ—Ç —Ç–∞–∫–∞—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞',
#         reply_markup=kb_builder.as_markup(resize_keyboard=True)
#     )
#
# # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫
# button_1 = KeyboardButton(text='–°–æ–±–∞–∫ ü¶Æ')
# button_2 = KeyboardButton(text='–û–≥—É—Ä—Ü–æ–≤ ü•í')
# button_3 = KeyboardButton(text='–ü—ã–ª–µ—Å–æ—Å–æ–≤ ü•í')
# button_4 = KeyboardButton(text='–ú–∞—Ä—Ç–∞ ü•í')
# button_5 = KeyboardButton(text='–¢–æ—Ä—Ç–∏–ª ü•í')
#
# # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏
# keyboard = ReplyKeyboardMarkup(keyboard=[[button_1, button_2],
#                                          [button_3, button_4, button_5]],
#                                resize_keyboard=True)
#
#
# # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
# # –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
# @dp.message(CommandStart())
# async def process_start_command(message: Message):
#     await message.answer(
#         text='–ß–µ–≥–æ –∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è –±–æ–ª—å—à–µ?',
#         reply_markup=keyboard,
#         one_time_keyboard=True
#     )
#
#
# # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç "–°–æ–±–∞–∫ ü¶Æ"
# @dp.message(F.text == '–°–æ–±–∞–∫ ü¶Æ')
# async def process_dog_answer(message: Message):
#     await message.answer(
#         text='–î–∞, –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ, –∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è —Å–æ–±–∞–∫. '
#              '–ù–æ –≤—ã –≤–∏–¥–µ–ª–∏ –∫–∞–∫ –æ–Ω–∏ –±–æ—è—Ç—Å—è –æ–≥—É—Ä—Ü–æ–≤?'
#         #reply_markup=ReplyKeyboardRemove()
#     )
#
#
# # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç "–û–≥—É—Ä—Ü–æ–≤ ü•í"
# @dp.message(F.text == '–û–≥—É—Ä—Ü–æ–≤ ü•í')
# async def process_cucumber_answer(message: Message):
#     await message.answer(
#         text='–î–∞, –∏–Ω–æ–≥–¥–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –æ–≥—É—Ä—Ü–æ–≤ '
#              '–∫–æ—à–∫–∏ –±–æ—è—Ç—Å—è –±–æ–ª—å—à–µ',
#         #reply_markup=ReplyKeyboardRemove()
#     )


if __name__ == '__main__':
    dp.run_polling(bot)